// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 0002_user_management_account.sql

package database

import (
	"context"
	"database/sql"
)

const createUserAccount = `-- name: CreateUserAccount :execresult
INSERT INTO user_management_account (
    usa_id, usa_email, usa_password, usa_salt, usa_active_time, usa_active, usa_locked, createdBy, createdAt
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, NOW()
)
`

type CreateUserAccountParams struct {
	UsaID         string
	UsaEmail      string
	UsaPassword   string
	UsaSalt       string
	UsaActiveTime sql.NullTime
	UsaActive     sql.NullInt32
	UsaLocked     sql.NullInt32
	Createdby     sql.NullString
}

func (q *Queries) CreateUserAccount(ctx context.Context, arg CreateUserAccountParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUserAccount,
		arg.UsaID,
		arg.UsaEmail,
		arg.UsaPassword,
		arg.UsaSalt,
		arg.UsaActiveTime,
		arg.UsaActive,
		arg.UsaLocked,
		arg.Createdby,
	)
}

const findUserAccountByEmail = `-- name: FindUserAccountByEmail :one
SELECT usa_id, usa_email, usa_password, usa_salt, usa_active_time, usa_locked_time, usa_recover_pass_time, usa_verify_time, usa_verify_code, usa_recover_pass_code, usa_active, usa_locked
FROM user_management_account
WHERE usa_email = ?
`

type FindUserAccountByEmailRow struct {
	UsaID              string
	UsaEmail           string
	UsaPassword        string
	UsaSalt            string
	UsaActiveTime      sql.NullTime
	UsaLockedTime      sql.NullTime
	UsaRecoverPassTime sql.NullTime
	UsaVerifyTime      sql.NullTime
	UsaVerifyCode      sql.NullString
	UsaRecoverPassCode sql.NullString
	UsaActive          sql.NullInt32
	UsaLocked          sql.NullInt32
}

func (q *Queries) FindUserAccountByEmail(ctx context.Context, usaEmail string) (FindUserAccountByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, findUserAccountByEmail, usaEmail)
	var i FindUserAccountByEmailRow
	err := row.Scan(
		&i.UsaID,
		&i.UsaEmail,
		&i.UsaPassword,
		&i.UsaSalt,
		&i.UsaActiveTime,
		&i.UsaLockedTime,
		&i.UsaRecoverPassTime,
		&i.UsaVerifyTime,
		&i.UsaVerifyCode,
		&i.UsaRecoverPassCode,
		&i.UsaActive,
		&i.UsaLocked,
	)
	return i, err
}

const findUserAccountById = `-- name: FindUserAccountById :one
SELECT usa_id, usa_email, usa_password, usa_salt, usa_active_time, usa_locked_time, usa_recover_pass_time, usa_verify_time, usa_verify_code, usa_recover_pass_code, usa_active, usa_locked
FROM user_management_account
WHERE usa_id = ?
`

type FindUserAccountByIdRow struct {
	UsaID              string
	UsaEmail           string
	UsaPassword        string
	UsaSalt            string
	UsaActiveTime      sql.NullTime
	UsaLockedTime      sql.NullTime
	UsaRecoverPassTime sql.NullTime
	UsaVerifyTime      sql.NullTime
	UsaVerifyCode      sql.NullString
	UsaRecoverPassCode sql.NullString
	UsaActive          sql.NullInt32
	UsaLocked          sql.NullInt32
}

func (q *Queries) FindUserAccountById(ctx context.Context, usaID string) (FindUserAccountByIdRow, error) {
	row := q.db.QueryRowContext(ctx, findUserAccountById, usaID)
	var i FindUserAccountByIdRow
	err := row.Scan(
		&i.UsaID,
		&i.UsaEmail,
		&i.UsaPassword,
		&i.UsaSalt,
		&i.UsaActiveTime,
		&i.UsaLockedTime,
		&i.UsaRecoverPassTime,
		&i.UsaVerifyTime,
		&i.UsaVerifyCode,
		&i.UsaRecoverPassCode,
		&i.UsaActive,
		&i.UsaLocked,
	)
	return i, err
}
