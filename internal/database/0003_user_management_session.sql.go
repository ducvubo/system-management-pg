// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 0003_user_management_session.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createUserSession = `-- name: CreateUserSession :execresult
INSERT INTO user_management_session (
    uss_id, usa_id, uss_rf, uss_key_at, uss_key_rf, uss_client_id, uss_login_time, createdAt
) VALUES (
    ?, ?, ?, ?, ?, ?, NOW(), NOW()
)
`

type CreateUserSessionParams struct {
	UssID       string
	UsaID       string
	UssRf       string
	UssKeyAt    string
	UssKeyRf    string
	UssClientID string
}

func (q *Queries) CreateUserSession(ctx context.Context, arg CreateUserSessionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUserSession,
		arg.UssID,
		arg.UsaID,
		arg.UssRf,
		arg.UssKeyAt,
		arg.UssKeyRf,
		arg.UssClientID,
	)
}

const deleteUserSessionByClientIdAndUsaId = `-- name: DeleteUserSessionByClientIdAndUsaId :exec
DELETE FROM user_management_session WHERE uss_client_id = ? AND usa_id = ?
`

type DeleteUserSessionByClientIdAndUsaIdParams struct {
	UssClientID string
	UsaID       string
}

func (q *Queries) DeleteUserSessionByClientIdAndUsaId(ctx context.Context, arg DeleteUserSessionByClientIdAndUsaIdParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserSessionByClientIdAndUsaId, arg.UssClientID, arg.UsaID)
	return err
}

const findUserSessionBySessionIdAndRefreshToken = `-- name: FindUserSessionBySessionIdAndRefreshToken :one
SELECT uss_id, usa_id, uss_rf, uss_key_at, uss_key_rf, uss_client_id, uss_login_time, updatedAt
FROM user_management_session
WHERE uss_client_id = ? AND uss_rf = ?
`

type FindUserSessionBySessionIdAndRefreshTokenParams struct {
	UssClientID string
	UssRf       string
}

type FindUserSessionBySessionIdAndRefreshTokenRow struct {
	UssID        string
	UsaID        string
	UssRf        string
	UssKeyAt     string
	UssKeyRf     string
	UssClientID  string
	UssLoginTime time.Time
	Updatedat    sql.NullTime
}

func (q *Queries) FindUserSessionBySessionIdAndRefreshToken(ctx context.Context, arg FindUserSessionBySessionIdAndRefreshTokenParams) (FindUserSessionBySessionIdAndRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, findUserSessionBySessionIdAndRefreshToken, arg.UssClientID, arg.UssRf)
	var i FindUserSessionBySessionIdAndRefreshTokenRow
	err := row.Scan(
		&i.UssID,
		&i.UsaID,
		&i.UssRf,
		&i.UssKeyAt,
		&i.UssKeyRf,
		&i.UssClientID,
		&i.UssLoginTime,
		&i.Updatedat,
	)
	return i, err
}
