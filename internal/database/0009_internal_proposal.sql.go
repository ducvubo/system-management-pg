// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 0009_internal_proposal.sql

package database

import (
	"context"
	"database/sql"
)

const createInternalProposal = `-- name: CreateInternalProposal :execresult
INSERT INTO internal_proposal (
    itn_proposal_id,itn_proposal_res_id, itn_proposal_title, itn_proposal_content, itn_proposal_type, createdBy, createdAt, updatedAt
) VALUES (
    ?,?, ?, ?, ?, ?, NOW(), NOW()
)
`

type CreateInternalProposalParams struct {
	ItnProposalID      string
	ItnProposalResID   string
	ItnProposalTitle   sql.NullString
	ItnProposalContent sql.NullString
	ItnProposalType    sql.NullString
	Createdby          sql.NullString
}

func (q *Queries) CreateInternalProposal(ctx context.Context, arg CreateInternalProposalParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createInternalProposal,
		arg.ItnProposalID,
		arg.ItnProposalResID,
		arg.ItnProposalTitle,
		arg.ItnProposalContent,
		arg.ItnProposalType,
		arg.Createdby,
	)
}

const deleteInternalProposal = `-- name: DeleteInternalProposal :exec
UPDATE internal_proposal
SET isDeleted = 1, deletedAt = NOW(), deletedBy = ?
WHERE itn_proposal_id = ? AND itn_proposal_res_id = ?
`

type DeleteInternalProposalParams struct {
	Deletedby        sql.NullString
	ItnProposalID    string
	ItnProposalResID string
}

func (q *Queries) DeleteInternalProposal(ctx context.Context, arg DeleteInternalProposalParams) error {
	_, err := q.db.ExecContext(ctx, deleteInternalProposal, arg.Deletedby, arg.ItnProposalID, arg.ItnProposalResID)
	return err
}

const getInternalProposal = `-- name: GetInternalProposal :one
SELECT itn_proposal_id, itn_proposal_res_id, itn_proposal_title, itn_proposal_content, itn_proposal_type, isDeleted
FROM internal_proposal
WHERE itn_proposal_id = ? AND itn_proposal_res_id = ?
`

type GetInternalProposalParams struct {
	ItnProposalID    string
	ItnProposalResID string
}

type GetInternalProposalRow struct {
	ItnProposalID      string
	ItnProposalResID   string
	ItnProposalTitle   sql.NullString
	ItnProposalContent sql.NullString
	ItnProposalType    sql.NullString
	Isdeleted          sql.NullInt32
}

func (q *Queries) GetInternalProposal(ctx context.Context, arg GetInternalProposalParams) (GetInternalProposalRow, error) {
	row := q.db.QueryRowContext(ctx, getInternalProposal, arg.ItnProposalID, arg.ItnProposalResID)
	var i GetInternalProposalRow
	err := row.Scan(
		&i.ItnProposalID,
		&i.ItnProposalResID,
		&i.ItnProposalTitle,
		&i.ItnProposalContent,
		&i.ItnProposalType,
		&i.Isdeleted,
	)
	return i, err
}

const getListInternalProposal = `-- name: GetListInternalProposal :many
WITH total_count AS (
    SELECT COUNT(*) AS total FROM internal_proposal WHERE internal_proposal.isDeleted = ? AND internal_proposal.itn_proposal_title LIKE ? AND internal_proposal.itn_proposal_res_id = ?
)
SELECT 
    itn_proposal_id, itn_proposal_title, itn_proposal_content, itn_proposal_type, itn_proposal_status,
    (SELECT total FROM total_count) AS total_items,
    COALESCE(CEIL((SELECT total FROM total_count) / NULLIF(CAST(? AS FLOAT), 0)), 0) AS total_pages
FROM internal_proposal
WHERE internal_proposal.isDeleted = ? AND internal_proposal.itn_proposal_title LIKE ? AND internal_proposal.itn_proposal_res_id = ?
LIMIT ? OFFSET ?
`

type GetListInternalProposalParams struct {
	Isdeleted          sql.NullInt32
	ItnProposalTitle   sql.NullString
	ItnProposalResID   string
	Column4            float64
	Isdeleted_2        sql.NullInt32
	ItnProposalTitle_2 sql.NullString
	ItnProposalResID_2 string
	Limit              int32
	Offset             int32
}

type GetListInternalProposalRow struct {
	ItnProposalID      string
	ItnProposalTitle   sql.NullString
	ItnProposalContent sql.NullString
	ItnProposalType    sql.NullString
	ItnProposalStatus  NullInternalProposalItnProposalStatus
	TotalItems         int64
	TotalPages         interface{}
}

func (q *Queries) GetListInternalProposal(ctx context.Context, arg GetListInternalProposalParams) ([]GetListInternalProposalRow, error) {
	rows, err := q.db.QueryContext(ctx, getListInternalProposal,
		arg.Isdeleted,
		arg.ItnProposalTitle,
		arg.ItnProposalResID,
		arg.Column4,
		arg.Isdeleted_2,
		arg.ItnProposalTitle_2,
		arg.ItnProposalResID_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListInternalProposalRow
	for rows.Next() {
		var i GetListInternalProposalRow
		if err := rows.Scan(
			&i.ItnProposalID,
			&i.ItnProposalTitle,
			&i.ItnProposalContent,
			&i.ItnProposalType,
			&i.ItnProposalStatus,
			&i.TotalItems,
			&i.TotalPages,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreInternalProposal = `-- name: RestoreInternalProposal :exec
UPDATE internal_proposal
SET isDeleted = 0, deletedAt = NULL, deletedBy = NULL
WHERE itn_proposal_id = ? AND itn_proposal_res_id = ?
`

type RestoreInternalProposalParams struct {
	ItnProposalID    string
	ItnProposalResID string
}

func (q *Queries) RestoreInternalProposal(ctx context.Context, arg RestoreInternalProposalParams) error {
	_, err := q.db.ExecContext(ctx, restoreInternalProposal, arg.ItnProposalID, arg.ItnProposalResID)
	return err
}

const updateInternalProposal = `-- name: UpdateInternalProposal :exec
UPDATE internal_proposal
SET itn_proposal_title = ?, itn_proposal_content = ?, itn_proposal_type = ?, updatedAt = NOW(), updatedBy = ?
WHERE itn_proposal_id = ? AND itn_proposal_res_id = ?
`

type UpdateInternalProposalParams struct {
	ItnProposalTitle   sql.NullString
	ItnProposalContent sql.NullString
	ItnProposalType    sql.NullString
	Updatedby          sql.NullString
	ItnProposalID      string
	ItnProposalResID   string
}

func (q *Queries) UpdateInternalProposal(ctx context.Context, arg UpdateInternalProposalParams) error {
	_, err := q.db.ExecContext(ctx, updateInternalProposal,
		arg.ItnProposalTitle,
		arg.ItnProposalContent,
		arg.ItnProposalType,
		arg.Updatedby,
		arg.ItnProposalID,
		arg.ItnProposalResID,
	)
	return err
}

const updateInternalProposalStatus = `-- name: UpdateInternalProposalStatus :exec
UPDATE internal_proposal
SET itn_proposal_status = ?, updatedAt = NOW(), updatedBy = ?
WHERE itn_proposal_id = ? AND itn_proposal_res_id = ?
`

type UpdateInternalProposalStatusParams struct {
	ItnProposalStatus NullInternalProposalItnProposalStatus
	Updatedby         sql.NullString
	ItnProposalID     string
	ItnProposalResID  string
}

func (q *Queries) UpdateInternalProposalStatus(ctx context.Context, arg UpdateInternalProposalStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateInternalProposalStatus,
		arg.ItnProposalStatus,
		arg.Updatedby,
		arg.ItnProposalID,
		arg.ItnProposalResID,
	)
	return err
}
