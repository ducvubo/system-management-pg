// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 0007_user_pato_session.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createUserPatoSession = `-- name: CreateUserPatoSession :execresult
INSERT INTO user_pato_session (
    uss_pt_id, usa_pt_id, uss_pt_rf, uss_pt_key_at, uss_pt_key_rf, uss_pt_client_id, uss_pt_login_time, createdAt
) VALUES (
    ?, ?, ?, ?, ?, ?, NOW(), NOW()
)
`

type CreateUserPatoSessionParams struct {
	UssPtID       string
	UsaPtID       string
	UssPtRf       string
	UssPtKeyAt    string
	UssPtKeyRf    string
	UssPtClientID string
}

func (q *Queries) CreateUserPatoSession(ctx context.Context, arg CreateUserPatoSessionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUserPatoSession,
		arg.UssPtID,
		arg.UsaPtID,
		arg.UssPtRf,
		arg.UssPtKeyAt,
		arg.UssPtKeyRf,
		arg.UssPtClientID,
	)
}

const deleteUserPatoSessionByClientIdAndUsaId = `-- name: DeleteUserPatoSessionByClientIdAndUsaId :exec
DELETE FROM user_pato_session WHERE uss_pt_client_id = ? AND usa_pt_id = ?
`

type DeleteUserPatoSessionByClientIdAndUsaIdParams struct {
	UssPtClientID string
	UsaPtID       string
}

func (q *Queries) DeleteUserPatoSessionByClientIdAndUsaId(ctx context.Context, arg DeleteUserPatoSessionByClientIdAndUsaIdParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserPatoSessionByClientIdAndUsaId, arg.UssPtClientID, arg.UsaPtID)
	return err
}

const findUserPatoSessionBySessionIdAndRefreshToken = `-- name: FindUserPatoSessionBySessionIdAndRefreshToken :one
SELECT uss_pt_id, usa_pt_id, uss_pt_rf, uss_pt_key_at, uss_pt_key_rf, uss_pt_client_id, uss_pt_login_time, updatedAt
FROM user_pato_session
WHERE uss_pt_client_id = ? AND uss_pt_rf = ?
`

type FindUserPatoSessionBySessionIdAndRefreshTokenParams struct {
	UssPtClientID string
	UssPtRf       string
}

type FindUserPatoSessionBySessionIdAndRefreshTokenRow struct {
	UssPtID        string
	UsaPtID        string
	UssPtRf        string
	UssPtKeyAt     string
	UssPtKeyRf     string
	UssPtClientID  string
	UssPtLoginTime time.Time
	Updatedat      sql.NullTime
}

func (q *Queries) FindUserPatoSessionBySessionIdAndRefreshToken(ctx context.Context, arg FindUserPatoSessionBySessionIdAndRefreshTokenParams) (FindUserPatoSessionBySessionIdAndRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, findUserPatoSessionBySessionIdAndRefreshToken, arg.UssPtClientID, arg.UssPtRf)
	var i FindUserPatoSessionBySessionIdAndRefreshTokenRow
	err := row.Scan(
		&i.UssPtID,
		&i.UsaPtID,
		&i.UssPtRf,
		&i.UssPtKeyAt,
		&i.UssPtKeyRf,
		&i.UssPtClientID,
		&i.UssPtLoginTime,
		&i.Updatedat,
	)
	return i, err
}
