// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 0012_operational_costs.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createOperationalCosts = `-- name: CreateOperationalCosts :execresult
INSERT INTO operational_costs (
    opera_cost_id,opera_cost_res_id, opera_cost_type, opera_cost_amount, opera_cost_description,
    opera_cost_date, createdBy, createdAt, updatedAt
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, NOW(), NOW()
)
`

type CreateOperationalCostsParams struct {
	OperaCostID          string
	OperaCostResID       string
	OperaCostType        string
	OperaCostAmount      string
	OperaCostDescription sql.NullString
	OperaCostDate        time.Time
	Createdby            sql.NullString
}

func (q *Queries) CreateOperationalCosts(ctx context.Context, arg CreateOperationalCostsParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createOperationalCosts,
		arg.OperaCostID,
		arg.OperaCostResID,
		arg.OperaCostType,
		arg.OperaCostAmount,
		arg.OperaCostDescription,
		arg.OperaCostDate,
		arg.Createdby,
	)
}

const deleteOperationalCosts = `-- name: DeleteOperationalCosts :exec
UPDATE operational_costs
SET isDeleted = 1, deletedAt = NOW(), deletedBy = ?
WHERE opera_cost_id = ? AND opera_cost_res_id = ?
`

type DeleteOperationalCostsParams struct {
	Deletedby      sql.NullString
	OperaCostID    string
	OperaCostResID string
}

func (q *Queries) DeleteOperationalCosts(ctx context.Context, arg DeleteOperationalCostsParams) error {
	_, err := q.db.ExecContext(ctx, deleteOperationalCosts, arg.Deletedby, arg.OperaCostID, arg.OperaCostResID)
	return err
}

const getListOperationalCostss = `-- name: GetListOperationalCostss :many
WITH total_count AS (
    SELECT COUNT(*) AS total FROM operational_costs
    WHERE operational_costs.isDeleted = ? AND operational_costs.opera_cost_type LIKE ? AND operational_costs.opera_cost_res_id = ?
)
SELECT 
    opera_cost_id, opera_cost_type, opera_cost_amount, opera_cost_date, opera_cost_status,opera_cost_description,
    (SELECT total FROM total_count) AS total_items,
    COALESCE(CEIL((SELECT total FROM total_count) / NULLIF(CAST(? AS FLOAT), 0)), 0) AS total_pages
FROM operational_costs
WHERE operational_costs.isDeleted = ? AND operational_costs.opera_cost_type LIKE ? AND operational_costs.opera_cost_res_id = ?
LIMIT ? OFFSET ?
`

type GetListOperationalCostssParams struct {
	Isdeleted        sql.NullInt32
	OperaCostType    string
	OperaCostResID   string
	Column4          float64
	Isdeleted_2      sql.NullInt32
	OperaCostType_2  string
	OperaCostResID_2 string
	Limit            int32
	Offset           int32
}

type GetListOperationalCostssRow struct {
	OperaCostID          string
	OperaCostType        string
	OperaCostAmount      string
	OperaCostDate        time.Time
	OperaCostStatus      NullOperationalCostsOperaCostStatus
	OperaCostDescription sql.NullString
	TotalItems           int64
	TotalPages           interface{}
}

func (q *Queries) GetListOperationalCostss(ctx context.Context, arg GetListOperationalCostssParams) ([]GetListOperationalCostssRow, error) {
	rows, err := q.db.QueryContext(ctx, getListOperationalCostss,
		arg.Isdeleted,
		arg.OperaCostType,
		arg.OperaCostResID,
		arg.Column4,
		arg.Isdeleted_2,
		arg.OperaCostType_2,
		arg.OperaCostResID_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListOperationalCostssRow
	for rows.Next() {
		var i GetListOperationalCostssRow
		if err := rows.Scan(
			&i.OperaCostID,
			&i.OperaCostType,
			&i.OperaCostAmount,
			&i.OperaCostDate,
			&i.OperaCostStatus,
			&i.OperaCostDescription,
			&i.TotalItems,
			&i.TotalPages,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOperationalCosts = `-- name: GetOperationalCosts :one
SELECT opera_cost_id, opera_cost_type, opera_cost_amount, opera_cost_description,
       opera_cost_date, opera_cost_status, isDeleted
FROM operational_costs
WHERE opera_cost_id = ? AND opera_cost_res_id = ?
`

type GetOperationalCostsParams struct {
	OperaCostID    string
	OperaCostResID string
}

type GetOperationalCostsRow struct {
	OperaCostID          string
	OperaCostType        string
	OperaCostAmount      string
	OperaCostDescription sql.NullString
	OperaCostDate        time.Time
	OperaCostStatus      NullOperationalCostsOperaCostStatus
	Isdeleted            sql.NullInt32
}

func (q *Queries) GetOperationalCosts(ctx context.Context, arg GetOperationalCostsParams) (GetOperationalCostsRow, error) {
	row := q.db.QueryRowContext(ctx, getOperationalCosts, arg.OperaCostID, arg.OperaCostResID)
	var i GetOperationalCostsRow
	err := row.Scan(
		&i.OperaCostID,
		&i.OperaCostType,
		&i.OperaCostAmount,
		&i.OperaCostDescription,
		&i.OperaCostDate,
		&i.OperaCostStatus,
		&i.Isdeleted,
	)
	return i, err
}

const restoreOperationalCosts = `-- name: RestoreOperationalCosts :exec
UPDATE operational_costs
SET isDeleted = 0, deletedAt = NULL, deletedBy = NULL
WHERE opera_cost_id = ? AND opera_cost_res_id = ?
`

type RestoreOperationalCostsParams struct {
	OperaCostID    string
	OperaCostResID string
}

func (q *Queries) RestoreOperationalCosts(ctx context.Context, arg RestoreOperationalCostsParams) error {
	_, err := q.db.ExecContext(ctx, restoreOperationalCosts, arg.OperaCostID, arg.OperaCostResID)
	return err
}

const updateOperationalCosts = `-- name: UpdateOperationalCosts :exec
UPDATE operational_costs
SET opera_cost_type = ?, opera_cost_amount = ?, opera_cost_description = ?, opera_cost_date = ?,
    updatedAt = NOW(), updatedBy = ?
WHERE opera_cost_id = ? AND opera_cost_res_id = ?
`

type UpdateOperationalCostsParams struct {
	OperaCostType        string
	OperaCostAmount      string
	OperaCostDescription sql.NullString
	OperaCostDate        time.Time
	Updatedby            sql.NullString
	OperaCostID          string
	OperaCostResID       string
}

func (q *Queries) UpdateOperationalCosts(ctx context.Context, arg UpdateOperationalCostsParams) error {
	_, err := q.db.ExecContext(ctx, updateOperationalCosts,
		arg.OperaCostType,
		arg.OperaCostAmount,
		arg.OperaCostDescription,
		arg.OperaCostDate,
		arg.Updatedby,
		arg.OperaCostID,
		arg.OperaCostResID,
	)
	return err
}

const updateOperationalCostsStatus = `-- name: UpdateOperationalCostsStatus :exec
UPDATE operational_costs
SET opera_cost_status = ?, updatedAt = NOW(), updatedBy = ?
WHERE opera_cost_id = ? AND opera_cost_res_id = ?
`

type UpdateOperationalCostsStatusParams struct {
	OperaCostStatus NullOperationalCostsOperaCostStatus
	Updatedby       sql.NullString
	OperaCostID     string
	OperaCostResID  string
}

func (q *Queries) UpdateOperationalCostsStatus(ctx context.Context, arg UpdateOperationalCostsStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOperationalCostsStatus,
		arg.OperaCostStatus,
		arg.Updatedby,
		arg.OperaCostID,
		arg.OperaCostResID,
	)
	return err
}
