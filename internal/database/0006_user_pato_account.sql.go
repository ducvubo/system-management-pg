// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 0006_user_pato_account.sql

package database

import (
	"context"
	"database/sql"
)

const createUserPatoAccount = `-- name: CreateUserPatoAccount :execresult
INSERT INTO user_pato_account (
    usa_pt_id, usa_pt_email, usa_pt_password, usa_pt_salt, usa_pt_active_time, usa_pt_active, usa_pt_locked, createdBy, createdAt
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, NOW()
)
`

type CreateUserPatoAccountParams struct {
	UsaPtID         string
	UsaPtEmail      string
	UsaPtPassword   string
	UsaPtSalt       string
	UsaPtActiveTime sql.NullTime
	UsaPtActive     sql.NullInt32
	UsaPtLocked     sql.NullInt32
	Createdby       sql.NullString
}

func (q *Queries) CreateUserPatoAccount(ctx context.Context, arg CreateUserPatoAccountParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUserPatoAccount,
		arg.UsaPtID,
		arg.UsaPtEmail,
		arg.UsaPtPassword,
		arg.UsaPtSalt,
		arg.UsaPtActiveTime,
		arg.UsaPtActive,
		arg.UsaPtLocked,
		arg.Createdby,
	)
}

const findUserPatoAccountByEmail = `-- name: FindUserPatoAccountByEmail :one
SELECT usa_pt_id, usa_pt_email, usa_pt_password, usa_pt_salt, usa_pt_active_time, usa_pt_locked_time, usa_pt_recover_pass_time, usa_pt_verify_time, usa_pt_verify_code, usa_pt_recover_pass_code, usa_pt_active, usa_pt_locked
FROM user_pato_account
WHERE usa_pt_email = ?
`

type FindUserPatoAccountByEmailRow struct {
	UsaPtID              string
	UsaPtEmail           string
	UsaPtPassword        string
	UsaPtSalt            string
	UsaPtActiveTime      sql.NullTime
	UsaPtLockedTime      sql.NullTime
	UsaPtRecoverPassTime sql.NullTime
	UsaPtVerifyTime      sql.NullTime
	UsaPtVerifyCode      sql.NullString
	UsaPtRecoverPassCode sql.NullString
	UsaPtActive          sql.NullInt32
	UsaPtLocked          sql.NullInt32
}

func (q *Queries) FindUserPatoAccountByEmail(ctx context.Context, usaPtEmail string) (FindUserPatoAccountByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, findUserPatoAccountByEmail, usaPtEmail)
	var i FindUserPatoAccountByEmailRow
	err := row.Scan(
		&i.UsaPtID,
		&i.UsaPtEmail,
		&i.UsaPtPassword,
		&i.UsaPtSalt,
		&i.UsaPtActiveTime,
		&i.UsaPtLockedTime,
		&i.UsaPtRecoverPassTime,
		&i.UsaPtVerifyTime,
		&i.UsaPtVerifyCode,
		&i.UsaPtRecoverPassCode,
		&i.UsaPtActive,
		&i.UsaPtLocked,
	)
	return i, err
}

const findUserPatoAccountById = `-- name: FindUserPatoAccountById :one
SELECT usa_pt_id, usa_pt_email, usa_pt_password, usa_pt_salt, usa_pt_active_time, usa_pt_locked_time, usa_pt_recover_pass_time, usa_pt_verify_time, usa_pt_verify_code, usa_pt_recover_pass_code, usa_pt_active, usa_pt_locked
FROM user_pato_account
WHERE usa_pt_id = ?
`

type FindUserPatoAccountByIdRow struct {
	UsaPtID              string
	UsaPtEmail           string
	UsaPtPassword        string
	UsaPtSalt            string
	UsaPtActiveTime      sql.NullTime
	UsaPtLockedTime      sql.NullTime
	UsaPtRecoverPassTime sql.NullTime
	UsaPtVerifyTime      sql.NullTime
	UsaPtVerifyCode      sql.NullString
	UsaPtRecoverPassCode sql.NullString
	UsaPtActive          sql.NullInt32
	UsaPtLocked          sql.NullInt32
}

func (q *Queries) FindUserPatoAccountById(ctx context.Context, usaPtID string) (FindUserPatoAccountByIdRow, error) {
	row := q.db.QueryRowContext(ctx, findUserPatoAccountById, usaPtID)
	var i FindUserPatoAccountByIdRow
	err := row.Scan(
		&i.UsaPtID,
		&i.UsaPtEmail,
		&i.UsaPtPassword,
		&i.UsaPtSalt,
		&i.UsaPtActiveTime,
		&i.UsaPtLockedTime,
		&i.UsaPtRecoverPassTime,
		&i.UsaPtVerifyTime,
		&i.UsaPtVerifyCode,
		&i.UsaPtRecoverPassCode,
		&i.UsaPtActive,
		&i.UsaPtLocked,
	)
	return i, err
}
