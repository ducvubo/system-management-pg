// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 0006_user_pato_account.sql

package database

import (
	"context"
	"database/sql"
)

const activeUserPatoAccount = `-- name: ActiveUserPatoAccount :exec
UPDATE user_pato_account
SET usa_pt_active_time = NOW(),usa_pt_active = 0, updatedAt = NOW(), updatedBy = ?
WHERE usa_pt_id = ?
`

type ActiveUserPatoAccountParams struct {
	Updatedby sql.NullString
	UsaPtID   int32
}

func (q *Queries) ActiveUserPatoAccount(ctx context.Context, arg ActiveUserPatoAccountParams) error {
	_, err := q.db.ExecContext(ctx, activeUserPatoAccount, arg.Updatedby, arg.UsaPtID)
	return err
}

const createUserPatoAccount = `-- name: CreateUserPatoAccount :execresult
INSERT INTO user_pato_account (
    usa_pt_id, usa_pt_email, usa_pt_password, usa_pt_salt, usa_pt_type,
    usa_pt_active, usa_pt_locked,createdAt
) VALUES (
    ?, ?, ?, ?, ?, ?, ?,  NOW()
)
`

type CreateUserPatoAccountParams struct {
	UsaPtID       int32
	UsaPtEmail    string
	UsaPtPassword string
	UsaPtSalt     string
	UsaPtType     sql.NullString
	UsaPtActive   sql.NullInt32
	UsaPtLocked   sql.NullInt32
}

func (q *Queries) CreateUserPatoAccount(ctx context.Context, arg CreateUserPatoAccountParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUserPatoAccount,
		arg.UsaPtID,
		arg.UsaPtEmail,
		arg.UsaPtPassword,
		arg.UsaPtSalt,
		arg.UsaPtType,
		arg.UsaPtActive,
		arg.UsaPtLocked,
	)
}

const findUserPatoAccountByEmailAndType = `-- name: FindUserPatoAccountByEmailAndType :one
SELECT usa_pt_id, usa_pt_email, usa_pt_password, usa_pt_salt, usa_pt_active_time, usa_pt_locked_time, usa_pt_recover_pass_time, usa_pt_verify_time, usa_pt_verify_code, usa_pt_recover_pass_code, usa_pt_active, usa_pt_locked
FROM user_pato_account
WHERE usa_pt_email = ? AND usa_pt_type = ?
`

type FindUserPatoAccountByEmailAndTypeParams struct {
	UsaPtEmail string
	UsaPtType  sql.NullString
}

type FindUserPatoAccountByEmailAndTypeRow struct {
	UsaPtID              int32
	UsaPtEmail           string
	UsaPtPassword        string
	UsaPtSalt            string
	UsaPtActiveTime      sql.NullTime
	UsaPtLockedTime      sql.NullTime
	UsaPtRecoverPassTime sql.NullTime
	UsaPtVerifyTime      sql.NullTime
	UsaPtVerifyCode      sql.NullString
	UsaPtRecoverPassCode sql.NullString
	UsaPtActive          sql.NullInt32
	UsaPtLocked          sql.NullInt32
}

func (q *Queries) FindUserPatoAccountByEmailAndType(ctx context.Context, arg FindUserPatoAccountByEmailAndTypeParams) (FindUserPatoAccountByEmailAndTypeRow, error) {
	row := q.db.QueryRowContext(ctx, findUserPatoAccountByEmailAndType, arg.UsaPtEmail, arg.UsaPtType)
	var i FindUserPatoAccountByEmailAndTypeRow
	err := row.Scan(
		&i.UsaPtID,
		&i.UsaPtEmail,
		&i.UsaPtPassword,
		&i.UsaPtSalt,
		&i.UsaPtActiveTime,
		&i.UsaPtLockedTime,
		&i.UsaPtRecoverPassTime,
		&i.UsaPtVerifyTime,
		&i.UsaPtVerifyCode,
		&i.UsaPtRecoverPassCode,
		&i.UsaPtActive,
		&i.UsaPtLocked,
	)
	return i, err
}
