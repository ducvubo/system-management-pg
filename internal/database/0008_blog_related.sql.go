// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 0008_blog_related.sql

package database

import (
	"context"
	"database/sql"
)

const createRelatedBlog = `-- name: CreateRelatedBlog :execresult
INSERT INTO blog_related (
    bl_id,
    bl_rlt_id
) VALUES (
    ?,
    ?
)
`

type CreateRelatedBlogParams struct {
	BlID    string
	BlRltID string
}

func (q *Queries) CreateRelatedBlog(ctx context.Context, arg CreateRelatedBlogParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createRelatedBlog, arg.BlID, arg.BlRltID)
}

const deleteRelatedBlog = `-- name: DeleteRelatedBlog :exec
DELETE FROM blog_related
WHERE bl_id = ?
`

func (q *Queries) DeleteRelatedBlog(ctx context.Context, blID string) error {
	_, err := q.db.ExecContext(ctx, deleteRelatedBlog, blID)
	return err
}

const getRelatedBlogByBlogId = `-- name: GetRelatedBlogByBlogId :many
SELECT 
    bl_id,
    bl_rlt_id
FROM blog_related
WHERE bl_id = ?
`

func (q *Queries) GetRelatedBlogByBlogId(ctx context.Context, blID string) ([]BlogRelated, error) {
	rows, err := q.db.QueryContext(ctx, getRelatedBlogByBlogId, blID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlogRelated
	for rows.Next() {
		var i BlogRelated
		if err := rows.Scan(&i.BlID, &i.BlRltID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
