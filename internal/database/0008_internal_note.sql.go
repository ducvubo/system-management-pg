// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 0008_internal_note.sql

package database

import (
	"context"
	"database/sql"
)

const createInternalNote = `-- name: CreateInternalNote :execresult
INSERT INTO internal_note (
    itn_note_id,itn_note_res_id, itn_note_title, itn_note_content, itn_note_type, createdBy, createdAt, updatedAt
) VALUES (
    ?,?, ?, ?, ?, ?, NOW(), NOW()
)
`

type CreateInternalNoteParams struct {
	ItnNoteID      string
	ItnNoteResID   string
	ItnNoteTitle   sql.NullString
	ItnNoteContent sql.NullString
	ItnNoteType    sql.NullString
	Createdby      sql.NullString
}

func (q *Queries) CreateInternalNote(ctx context.Context, arg CreateInternalNoteParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createInternalNote,
		arg.ItnNoteID,
		arg.ItnNoteResID,
		arg.ItnNoteTitle,
		arg.ItnNoteContent,
		arg.ItnNoteType,
		arg.Createdby,
	)
}

const deleteInternalNote = `-- name: DeleteInternalNote :exec
UPDATE internal_note
SET isDeleted = 1, deletedAt = NOW(), deletedBy = ?
WHERE itn_note_id = ? AND itn_note_res_id = ?
`

type DeleteInternalNoteParams struct {
	Deletedby    sql.NullString
	ItnNoteID    string
	ItnNoteResID string
}

func (q *Queries) DeleteInternalNote(ctx context.Context, arg DeleteInternalNoteParams) error {
	_, err := q.db.ExecContext(ctx, deleteInternalNote, arg.Deletedby, arg.ItnNoteID, arg.ItnNoteResID)
	return err
}

const getInternalNote = `-- name: GetInternalNote :one
SELECT itn_note_id, itn_note_res_id, itn_note_title, itn_note_content, itn_note_type, isDeleted
FROM internal_note
WHERE itn_note_id = ? AND itn_note_res_id = ?
`

type GetInternalNoteParams struct {
	ItnNoteID    string
	ItnNoteResID string
}

type GetInternalNoteRow struct {
	ItnNoteID      string
	ItnNoteResID   string
	ItnNoteTitle   sql.NullString
	ItnNoteContent sql.NullString
	ItnNoteType    sql.NullString
	Isdeleted      sql.NullInt32
}

func (q *Queries) GetInternalNote(ctx context.Context, arg GetInternalNoteParams) (GetInternalNoteRow, error) {
	row := q.db.QueryRowContext(ctx, getInternalNote, arg.ItnNoteID, arg.ItnNoteResID)
	var i GetInternalNoteRow
	err := row.Scan(
		&i.ItnNoteID,
		&i.ItnNoteResID,
		&i.ItnNoteTitle,
		&i.ItnNoteContent,
		&i.ItnNoteType,
		&i.Isdeleted,
	)
	return i, err
}

const getListInternalNote = `-- name: GetListInternalNote :many
WITH total_count AS (
    SELECT COUNT(*) AS total FROM internal_note WHERE internal_note.isDeleted = ? AND internal_note.itn_note_title LIKE ? AND internal_note.itn_note_res_id = ?
)
SELECT 
    itn_note_id, itn_note_title, itn_note_content, itn_note_type,
    (SELECT total FROM total_count) AS total_items,
    COALESCE(CEIL((SELECT total FROM total_count) / NULLIF(CAST(? AS FLOAT), 0)), 0) AS total_pages
FROM internal_note
WHERE internal_note.isDeleted = ? AND internal_note.itn_note_title LIKE ? AND internal_note.itn_note_res_id = ?
LIMIT ? OFFSET ?
`

type GetListInternalNoteParams struct {
	Isdeleted      sql.NullInt32
	ItnNoteTitle   sql.NullString
	ItnNoteResID   string
	Column4        float64
	Isdeleted_2    sql.NullInt32
	ItnNoteTitle_2 sql.NullString
	ItnNoteResID_2 string
	Limit          int32
	Offset         int32
}

type GetListInternalNoteRow struct {
	ItnNoteID      string
	ItnNoteTitle   sql.NullString
	ItnNoteContent sql.NullString
	ItnNoteType    sql.NullString
	TotalItems     int64
	TotalPages     interface{}
}

func (q *Queries) GetListInternalNote(ctx context.Context, arg GetListInternalNoteParams) ([]GetListInternalNoteRow, error) {
	rows, err := q.db.QueryContext(ctx, getListInternalNote,
		arg.Isdeleted,
		arg.ItnNoteTitle,
		arg.ItnNoteResID,
		arg.Column4,
		arg.Isdeleted_2,
		arg.ItnNoteTitle_2,
		arg.ItnNoteResID_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListInternalNoteRow
	for rows.Next() {
		var i GetListInternalNoteRow
		if err := rows.Scan(
			&i.ItnNoteID,
			&i.ItnNoteTitle,
			&i.ItnNoteContent,
			&i.ItnNoteType,
			&i.TotalItems,
			&i.TotalPages,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreInternalNote = `-- name: RestoreInternalNote :exec
UPDATE internal_note
SET isDeleted = 0, deletedAt = NULL, deletedBy = NULL
WHERE itn_note_id = ? AND itn_note_res_id = ?
`

type RestoreInternalNoteParams struct {
	ItnNoteID    string
	ItnNoteResID string
}

func (q *Queries) RestoreInternalNote(ctx context.Context, arg RestoreInternalNoteParams) error {
	_, err := q.db.ExecContext(ctx, restoreInternalNote, arg.ItnNoteID, arg.ItnNoteResID)
	return err
}

const updateInternalNote = `-- name: UpdateInternalNote :exec
UPDATE internal_note
SET itn_note_title = ?, itn_note_content = ?, itn_note_type = ?, updatedAt = NOW(), updatedBy = ?
WHERE itn_note_id = ? AND itn_note_res_id = ?
`

type UpdateInternalNoteParams struct {
	ItnNoteTitle   sql.NullString
	ItnNoteContent sql.NullString
	ItnNoteType    sql.NullString
	Updatedby      sql.NullString
	ItnNoteID      string
	ItnNoteResID   string
}

func (q *Queries) UpdateInternalNote(ctx context.Context, arg UpdateInternalNoteParams) error {
	_, err := q.db.ExecContext(ctx, updateInternalNote,
		arg.ItnNoteTitle,
		arg.ItnNoteContent,
		arg.ItnNoteType,
		arg.Updatedby,
		arg.ItnNoteID,
		arg.ItnNoteResID,
	)
	return err
}
