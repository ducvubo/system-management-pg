// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 0010_equipment_maintenance.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createEquipmentMaintenance = `-- name: CreateEquipmentMaintenance :execresult
INSERT INTO equipment_maintenance (
    eqp_mtn_id,eqp_mtn_res_id, eqp_mtn_name,  eqp_mtn_location, eqp_mtn_issue_description,
    eqp_mtn_reported_by, eqp_mtn_performed_by, eqp_mtn_date_reported, eqp_mtn_date_fixed, eqp_mtn_cost, eqp_mtn_note,
    createdBy, createdAt, updatedAt
) VALUES (
    ?,?,  ?, ?, ?, ?, ?, ?,  ?, ?, ?, ?, NOW(), NOW()
)
`

type CreateEquipmentMaintenanceParams struct {
	EqpMtnID               string
	EqpMtnResID            string
	EqpMtnName             sql.NullString
	EqpMtnLocation         sql.NullString
	EqpMtnIssueDescription sql.NullString
	EqpMtnReportedBy       sql.NullString
	EqpMtnPerformedBy      sql.NullString
	EqpMtnDateReported     time.Time
	EqpMtnDateFixed        sql.NullTime
	EqpMtnCost             sql.NullString
	EqpMtnNote             sql.NullString
	Createdby              sql.NullString
}

func (q *Queries) CreateEquipmentMaintenance(ctx context.Context, arg CreateEquipmentMaintenanceParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createEquipmentMaintenance,
		arg.EqpMtnID,
		arg.EqpMtnResID,
		arg.EqpMtnName,
		arg.EqpMtnLocation,
		arg.EqpMtnIssueDescription,
		arg.EqpMtnReportedBy,
		arg.EqpMtnPerformedBy,
		arg.EqpMtnDateReported,
		arg.EqpMtnDateFixed,
		arg.EqpMtnCost,
		arg.EqpMtnNote,
		arg.Createdby,
	)
}

const deleteEquipmentMaintenance = `-- name: DeleteEquipmentMaintenance :exec
UPDATE equipment_maintenance
SET isDeleted = 1, deletedAt = NOW(), deletedBy = ?
WHERE eqp_mtn_id = ? AND eqp_mtn_res_id = ?
`

type DeleteEquipmentMaintenanceParams struct {
	Deletedby   sql.NullString
	EqpMtnID    string
	EqpMtnResID string
}

func (q *Queries) DeleteEquipmentMaintenance(ctx context.Context, arg DeleteEquipmentMaintenanceParams) error {
	_, err := q.db.ExecContext(ctx, deleteEquipmentMaintenance, arg.Deletedby, arg.EqpMtnID, arg.EqpMtnResID)
	return err
}

const getEquipmentMaintenance = `-- name: GetEquipmentMaintenance :one
SELECT eqp_mtn_id, eqp_mtn_name,  eqp_mtn_location, eqp_mtn_issue_description,
       eqp_mtn_reported_by, eqp_mtn_performed_by, eqp_mtn_date_reported, eqp_mtn_date_fixed, eqp_mtn_cost, eqp_mtn_note, isDeleted
FROM equipment_maintenance
WHERE eqp_mtn_id = ? AND eqp_mtn_res_id = ?
`

type GetEquipmentMaintenanceParams struct {
	EqpMtnID    string
	EqpMtnResID string
}

type GetEquipmentMaintenanceRow struct {
	EqpMtnID               string
	EqpMtnName             sql.NullString
	EqpMtnLocation         sql.NullString
	EqpMtnIssueDescription sql.NullString
	EqpMtnReportedBy       sql.NullString
	EqpMtnPerformedBy      sql.NullString
	EqpMtnDateReported     time.Time
	EqpMtnDateFixed        sql.NullTime
	EqpMtnCost             sql.NullString
	EqpMtnNote             sql.NullString
	Isdeleted              sql.NullInt32
}

func (q *Queries) GetEquipmentMaintenance(ctx context.Context, arg GetEquipmentMaintenanceParams) (GetEquipmentMaintenanceRow, error) {
	row := q.db.QueryRowContext(ctx, getEquipmentMaintenance, arg.EqpMtnID, arg.EqpMtnResID)
	var i GetEquipmentMaintenanceRow
	err := row.Scan(
		&i.EqpMtnID,
		&i.EqpMtnName,
		&i.EqpMtnLocation,
		&i.EqpMtnIssueDescription,
		&i.EqpMtnReportedBy,
		&i.EqpMtnPerformedBy,
		&i.EqpMtnDateReported,
		&i.EqpMtnDateFixed,
		&i.EqpMtnCost,
		&i.EqpMtnNote,
		&i.Isdeleted,
	)
	return i, err
}

const getListEquipmentMaintenance = `-- name: GetListEquipmentMaintenance :many
WITH total_count AS (
    SELECT COUNT(*) AS total FROM equipment_maintenance WHERE equipment_maintenance.isDeleted = ? AND equipment_maintenance.eqp_mtn_name LIKE ? AND equipment_maintenance.eqp_mtn_res_id = ?
)
SELECT 
    eqp_mtn_id, eqp_mtn_name, eqp_mtn_location, eqp_mtn_issue_description,
    eqp_mtn_reported_by, eqp_mtn_performed_by, eqp_mtn_date_reported, eqp_mtn_date_fixed, eqp_mtn_cost, eqp_mtn_note, eqp_mtn_status,
    (SELECT total FROM total_count) AS total_items,
    COALESCE(CEIL((SELECT total FROM total_count) / NULLIF(CAST(? AS FLOAT), 0)), 0) AS total_pages
FROM equipment_maintenance
WHERE equipment_maintenance.isDeleted = ? AND equipment_maintenance.eqp_mtn_name LIKE ? AND equipment_maintenance.eqp_mtn_res_id = ?
LIMIT ? OFFSET ?
`

type GetListEquipmentMaintenanceParams struct {
	Isdeleted     sql.NullInt32
	EqpMtnName    sql.NullString
	EqpMtnResID   string
	Column4       float64
	Isdeleted_2   sql.NullInt32
	EqpMtnName_2  sql.NullString
	EqpMtnResID_2 string
	Limit         int32
	Offset        int32
}

type GetListEquipmentMaintenanceRow struct {
	EqpMtnID               string
	EqpMtnName             sql.NullString
	EqpMtnLocation         sql.NullString
	EqpMtnIssueDescription sql.NullString
	EqpMtnReportedBy       sql.NullString
	EqpMtnPerformedBy      sql.NullString
	EqpMtnDateReported     time.Time
	EqpMtnDateFixed        sql.NullTime
	EqpMtnCost             sql.NullString
	EqpMtnNote             sql.NullString
	EqpMtnStatus           NullEquipmentMaintenanceEqpMtnStatus
	TotalItems             int64
	TotalPages             interface{}
}

func (q *Queries) GetListEquipmentMaintenance(ctx context.Context, arg GetListEquipmentMaintenanceParams) ([]GetListEquipmentMaintenanceRow, error) {
	rows, err := q.db.QueryContext(ctx, getListEquipmentMaintenance,
		arg.Isdeleted,
		arg.EqpMtnName,
		arg.EqpMtnResID,
		arg.Column4,
		arg.Isdeleted_2,
		arg.EqpMtnName_2,
		arg.EqpMtnResID_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListEquipmentMaintenanceRow
	for rows.Next() {
		var i GetListEquipmentMaintenanceRow
		if err := rows.Scan(
			&i.EqpMtnID,
			&i.EqpMtnName,
			&i.EqpMtnLocation,
			&i.EqpMtnIssueDescription,
			&i.EqpMtnReportedBy,
			&i.EqpMtnPerformedBy,
			&i.EqpMtnDateReported,
			&i.EqpMtnDateFixed,
			&i.EqpMtnCost,
			&i.EqpMtnNote,
			&i.EqpMtnStatus,
			&i.TotalItems,
			&i.TotalPages,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreEquipmentMaintenance = `-- name: RestoreEquipmentMaintenance :exec
UPDATE equipment_maintenance
SET isDeleted = 0, deletedAt = NULL, deletedBy = NULL
WHERE eqp_mtn_id = ? AND eqp_mtn_res_id = ?
`

type RestoreEquipmentMaintenanceParams struct {
	EqpMtnID    string
	EqpMtnResID string
}

func (q *Queries) RestoreEquipmentMaintenance(ctx context.Context, arg RestoreEquipmentMaintenanceParams) error {
	_, err := q.db.ExecContext(ctx, restoreEquipmentMaintenance, arg.EqpMtnID, arg.EqpMtnResID)
	return err
}

const updateEquipmentMaintenance = `-- name: UpdateEquipmentMaintenance :exec
UPDATE equipment_maintenance
SET eqp_mtn_name = ?, eqp_mtn_location = ?, eqp_mtn_issue_description = ?,
    eqp_mtn_reported_by = ?, eqp_mtn_performed_by = ?, eqp_mtn_date_reported = ?, eqp_mtn_date_fixed = ?, eqp_mtn_cost = ?, 
    eqp_mtn_note = ?, updatedAt = NOW(), updatedBy = ?
WHERE eqp_mtn_id = ? AND eqp_mtn_res_id = ?
`

type UpdateEquipmentMaintenanceParams struct {
	EqpMtnName             sql.NullString
	EqpMtnLocation         sql.NullString
	EqpMtnIssueDescription sql.NullString
	EqpMtnReportedBy       sql.NullString
	EqpMtnPerformedBy      sql.NullString
	EqpMtnDateReported     time.Time
	EqpMtnDateFixed        sql.NullTime
	EqpMtnCost             sql.NullString
	EqpMtnNote             sql.NullString
	Updatedby              sql.NullString
	EqpMtnID               string
	EqpMtnResID            string
}

func (q *Queries) UpdateEquipmentMaintenance(ctx context.Context, arg UpdateEquipmentMaintenanceParams) error {
	_, err := q.db.ExecContext(ctx, updateEquipmentMaintenance,
		arg.EqpMtnName,
		arg.EqpMtnLocation,
		arg.EqpMtnIssueDescription,
		arg.EqpMtnReportedBy,
		arg.EqpMtnPerformedBy,
		arg.EqpMtnDateReported,
		arg.EqpMtnDateFixed,
		arg.EqpMtnCost,
		arg.EqpMtnNote,
		arg.Updatedby,
		arg.EqpMtnID,
		arg.EqpMtnResID,
	)
	return err
}

const updateEquipmentMaintenanceStatus = `-- name: UpdateEquipmentMaintenanceStatus :exec
UPDATE equipment_maintenance
SET eqp_mtn_status = ?, updatedAt = NOW(), updatedBy = ?
WHERE eqp_mtn_id = ? AND eqp_mtn_res_id = ?
`

type UpdateEquipmentMaintenanceStatusParams struct {
	EqpMtnStatus NullEquipmentMaintenanceEqpMtnStatus
	Updatedby    sql.NullString
	EqpMtnID     string
	EqpMtnResID  string
}

func (q *Queries) UpdateEquipmentMaintenanceStatus(ctx context.Context, arg UpdateEquipmentMaintenanceStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateEquipmentMaintenanceStatus,
		arg.EqpMtnStatus,
		arg.Updatedby,
		arg.EqpMtnID,
		arg.EqpMtnResID,
	)
	return err
}
