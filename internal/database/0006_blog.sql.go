// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 0006_blog.sql

package database

import (
	"context"
	"database/sql"
)

const checkBlogSlug = `-- name: CheckBlogSlug :many
SELECT 
    bl_id,
    bl_slug
FROM blog
WHERE bl_slug = ?
`

type CheckBlogSlugRow struct {
	BlID   string
	BlSlug string
}

func (q *Queries) CheckBlogSlug(ctx context.Context, blSlug string) ([]CheckBlogSlugRow, error) {
	rows, err := q.db.QueryContext(ctx, checkBlogSlug, blSlug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CheckBlogSlugRow
	for rows.Next() {
		var i CheckBlogSlugRow
		if err := rows.Scan(&i.BlID, &i.BlSlug); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createBlog = `-- name: CreateBlog :execresult
INSERT INTO blog (
    bl_id,
    cat_bl_id,
    bl_title,
    bl_description,
    bl_slug,
    bl_status,
    bl_image,
    bl_content,
    bl_type,
    bl_view,
    createdAt,
    updatedAt,
    createdBy,
    updatedBy
) VALUES (
    ?,
    ?,
    ?,
    ?,  
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    NOW(),
    NOW(),
    ?,
    ?
)
`

type CreateBlogParams struct {
	BlID          string
	CatBlID       string
	BlTitle       string
	BlDescription sql.NullString
	BlSlug        string
	BlStatus      sql.NullInt32
	BlImage       sql.NullString
	BlContent     string
	BlType        sql.NullInt32
	BlView        sql.NullInt32
	Createdby     sql.NullString
	Updatedby     sql.NullString
}

func (q *Queries) CreateBlog(ctx context.Context, arg CreateBlogParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createBlog,
		arg.BlID,
		arg.CatBlID,
		arg.BlTitle,
		arg.BlDescription,
		arg.BlSlug,
		arg.BlStatus,
		arg.BlImage,
		arg.BlContent,
		arg.BlType,
		arg.BlView,
		arg.Createdby,
		arg.Updatedby,
	)
}

const deleteBlog = `-- name: DeleteBlog :exec
UPDATE blog
SET isDeleted = 1,
    deletedAt = NOW(),
    deletedBy = ?
WHERE bl_id = ?
`

type DeleteBlogParams struct {
	Deletedby sql.NullString
	BlID      string
}

func (q *Queries) DeleteBlog(ctx context.Context, arg DeleteBlogParams) error {
	_, err := q.db.ExecContext(ctx, deleteBlog, arg.Deletedby, arg.BlID)
	return err
}

const getBlogByID = `-- name: GetBlogByID :one
SELECT 
    bl_id,
    cat_bl_id,
    bl_title,
    bl_description,
    bl_slug,
    bl_image,
    bl_content,
    bl_status,
    bl_type,
    bl_view,
    bl_published_time,
    bl_published_schedule
FROM blog
WHERE bl_id = ?
`

type GetBlogByIDRow struct {
	BlID                string
	CatBlID             string
	BlTitle             string
	BlDescription       sql.NullString
	BlSlug              string
	BlImage             sql.NullString
	BlContent           string
	BlStatus            sql.NullInt32
	BlType              sql.NullInt32
	BlView              sql.NullInt32
	BlPublishedTime     sql.NullTime
	BlPublishedSchedule sql.NullTime
}

func (q *Queries) GetBlogByID(ctx context.Context, blID string) (GetBlogByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getBlogByID, blID)
	var i GetBlogByIDRow
	err := row.Scan(
		&i.BlID,
		&i.CatBlID,
		&i.BlTitle,
		&i.BlDescription,
		&i.BlSlug,
		&i.BlImage,
		&i.BlContent,
		&i.BlStatus,
		&i.BlType,
		&i.BlView,
		&i.BlPublishedTime,
		&i.BlPublishedSchedule,
	)
	return i, err
}

const getListBlog = `-- name: GetListBlog :many
WITH total_count AS (
    SELECT COUNT(*) AS total FROM blog WHERE blog.isDeleted = ? AND blog.bl_title LIKE ?
)
SELECT 
    bl_id,
    cat_bl_id,
    bl_title,
    bl_description,
    bl_slug,
    bl_image,
    bl_content,
    bl_status,
    bl_type,
    bl_view,
    bl_published_time,
    bl_published_schedule,
    (SELECT total FROM total_count) AS total_items,
    CEIL((SELECT total FROM total_count) / CAST(? AS FLOAT)) AS total_pages
FROM blog
WHERE blog.isDeleted = ? AND blog.bl_title LIKE ?
LIMIT ? OFFSET ?
`

type GetListBlogParams struct {
	Isdeleted   sql.NullInt32
	BlTitle     string
	Column3     float64
	Isdeleted_2 sql.NullInt32
	BlTitle_2   string
	Limit       int32
	Offset      int32
}

type GetListBlogRow struct {
	BlID                string
	CatBlID             string
	BlTitle             string
	BlDescription       sql.NullString
	BlSlug              string
	BlImage             sql.NullString
	BlContent           string
	BlStatus            sql.NullInt32
	BlType              sql.NullInt32
	BlView              sql.NullInt32
	BlPublishedTime     sql.NullTime
	BlPublishedSchedule sql.NullTime
	TotalItems          int64
	TotalPages          int32
}

func (q *Queries) GetListBlog(ctx context.Context, arg GetListBlogParams) ([]GetListBlogRow, error) {
	rows, err := q.db.QueryContext(ctx, getListBlog,
		arg.Isdeleted,
		arg.BlTitle,
		arg.Column3,
		arg.Isdeleted_2,
		arg.BlTitle_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListBlogRow
	for rows.Next() {
		var i GetListBlogRow
		if err := rows.Scan(
			&i.BlID,
			&i.CatBlID,
			&i.BlTitle,
			&i.BlDescription,
			&i.BlSlug,
			&i.BlImage,
			&i.BlContent,
			&i.BlStatus,
			&i.BlType,
			&i.BlView,
			&i.BlPublishedTime,
			&i.BlPublishedSchedule,
			&i.TotalItems,
			&i.TotalPages,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListBlogByCategory = `-- name: GetListBlogByCategory :many
WITH total_count AS (
    SELECT COUNT(*) AS total FROM blog WHERE blog.isDeleted = ? AND blog.cat_bl_id = ?
)
SELECT 
    bl_id,
    cat_bl_id,
    bl_title,
    bl_description,
    bl_slug,
    bl_image,
    bl_content,
    bl_status,
    bl_type,
    bl_view,
    bl_published_time,
    bl_published_schedule,
    (SELECT total FROM total_count) AS total_items,
    CEIL((SELECT total FROM total_count) / CAST(? AS FLOAT)) AS total_pages
FROM blog
WHERE blog.isDeleted = ? AND blog.cat_bl_id = ?
LIMIT ? OFFSET ?
`

type GetListBlogByCategoryParams struct {
	Isdeleted   sql.NullInt32
	CatBlID     string
	Column3     float64
	Isdeleted_2 sql.NullInt32
	CatBlID_2   string
	Limit       int32
	Offset      int32
}

type GetListBlogByCategoryRow struct {
	BlID                string
	CatBlID             string
	BlTitle             string
	BlDescription       sql.NullString
	BlSlug              string
	BlImage             sql.NullString
	BlContent           string
	BlStatus            sql.NullInt32
	BlType              sql.NullInt32
	BlView              sql.NullInt32
	BlPublishedTime     sql.NullTime
	BlPublishedSchedule sql.NullTime
	TotalItems          int64
	TotalPages          int32
}

func (q *Queries) GetListBlogByCategory(ctx context.Context, arg GetListBlogByCategoryParams) ([]GetListBlogByCategoryRow, error) {
	rows, err := q.db.QueryContext(ctx, getListBlogByCategory,
		arg.Isdeleted,
		arg.CatBlID,
		arg.Column3,
		arg.Isdeleted_2,
		arg.CatBlID_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListBlogByCategoryRow
	for rows.Next() {
		var i GetListBlogByCategoryRow
		if err := rows.Scan(
			&i.BlID,
			&i.CatBlID,
			&i.BlTitle,
			&i.BlDescription,
			&i.BlSlug,
			&i.BlImage,
			&i.BlContent,
			&i.BlStatus,
			&i.BlType,
			&i.BlView,
			&i.BlPublishedTime,
			&i.BlPublishedSchedule,
			&i.TotalItems,
			&i.TotalPages,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreBlog = `-- name: RestoreBlog :exec
UPDATE blog
SET isDeleted = 0,
    deletedAt = NULL,
    deletedBy = NULL
WHERE bl_id = ?
`

func (q *Queries) RestoreBlog(ctx context.Context, blID string) error {
	_, err := q.db.ExecContext(ctx, restoreBlog, blID)
	return err
}

const updateBlog = `-- name: UpdateBlog :exec
UPDATE blog
SET cat_bl_id = ?,
    bl_title = ?,
    bl_description = ?,
    bl_slug = ?,
    bl_image = ?,
    bl_content = ?,
    bl_view = ?,
    updatedAt = NOW(),
    updatedBy = ?
WHERE bl_id = ?
`

type UpdateBlogParams struct {
	CatBlID       string
	BlTitle       string
	BlDescription sql.NullString
	BlSlug        string
	BlImage       sql.NullString
	BlContent     string
	BlView        sql.NullInt32
	Updatedby     sql.NullString
	BlID          string
}

func (q *Queries) UpdateBlog(ctx context.Context, arg UpdateBlogParams) error {
	_, err := q.db.ExecContext(ctx, updateBlog,
		arg.CatBlID,
		arg.BlTitle,
		arg.BlDescription,
		arg.BlSlug,
		arg.BlImage,
		arg.BlContent,
		arg.BlView,
		arg.Updatedby,
		arg.BlID,
	)
	return err
}

const updateStatusBlog = `-- name: UpdateStatusBlog :exec
UPDATE blog
SET bl_status = ?,
    updatedAt = NOW(),
    updatedBy = ?
WHERE bl_id = ?
`

type UpdateStatusBlogParams struct {
	BlStatus  sql.NullInt32
	Updatedby sql.NullString
	BlID      string
}

func (q *Queries) UpdateStatusBlog(ctx context.Context, arg UpdateStatusBlogParams) error {
	_, err := q.db.ExecContext(ctx, updateStatusBlog, arg.BlStatus, arg.Updatedby, arg.BlID)
	return err
}
