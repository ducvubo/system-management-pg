// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 0005_category_blog.sql

package database

import (
	"context"
	"database/sql"
)

const createCategoryBlog = `-- name: CreateCategoryBlog :execresult
INSERT INTO category_blog (cat_bl_id, cat_bl_name, cat_bl_description, cat_bl_slug,
    cat_bl_order,
    createdAt,
    updatedAt,
    createdBy,
    updatedBy
) VALUES (
    ?,
    ?,
    ?,
    ?,
    ?,
    NOW(),
    NOW(),
    ?,
    ?
)
`

type CreateCategoryBlogParams struct {
	CatBlID          string
	CatBlName        string
	CatBlDescription sql.NullString
	CatBlSlug        string
	CatBlOrder       sql.NullInt32
	Createdby        sql.NullString
	Updatedby        sql.NullString
}

func (q *Queries) CreateCategoryBlog(ctx context.Context, arg CreateCategoryBlogParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createCategoryBlog,
		arg.CatBlID,
		arg.CatBlName,
		arg.CatBlDescription,
		arg.CatBlSlug,
		arg.CatBlOrder,
		arg.Createdby,
		arg.Updatedby,
	)
}

const deleteCategoryBlog = `-- name: DeleteCategoryBlog :exec
UPDATE category_blog
SET isDeleted = 1,
    deletedAt = NOW(),
    deletedBy = ?
WHERE cat_bl_id = ?
`

type DeleteCategoryBlogParams struct {
	Deletedby sql.NullString
	CatBlID   string
}

func (q *Queries) DeleteCategoryBlog(ctx context.Context, arg DeleteCategoryBlogParams) error {
	_, err := q.db.ExecContext(ctx, deleteCategoryBlog, arg.Deletedby, arg.CatBlID)
	return err
}

const getCategoryBlog = `-- name: GetCategoryBlog :one
SELECT 
    cat_bl_id,
    cat_bl_name,
    cat_bl_description,
    cat_bl_slug,
    cat_bl_order,
    cat_bl_status
FROM category_blog
WHERE cat_bl_id = ?
`

type GetCategoryBlogRow struct {
	CatBlID          string
	CatBlName        string
	CatBlDescription sql.NullString
	CatBlSlug        string
	CatBlOrder       sql.NullInt32
	CatBlStatus      sql.NullInt32
}

func (q *Queries) GetCategoryBlog(ctx context.Context, catBlID string) (GetCategoryBlogRow, error) {
	row := q.db.QueryRowContext(ctx, getCategoryBlog, catBlID)
	var i GetCategoryBlogRow
	err := row.Scan(
		&i.CatBlID,
		&i.CatBlName,
		&i.CatBlDescription,
		&i.CatBlSlug,
		&i.CatBlOrder,
		&i.CatBlStatus,
	)
	return i, err
}

const getListCategoryBlog = `-- name: GetListCategoryBlog :many
WITH total_count AS (
    SELECT COUNT(*) AS total FROM category_blog WHERE category_blog.isDeleted = ? AND category_blog.cat_bl_name LIKE ?
)
SELECT 
    cat_bl_id,
    cat_bl_name,
    cat_bl_description,
    cat_bl_slug,
    cat_bl_order,
    cat_bl_status,
    (SELECT total FROM total_count) AS total_items,
    CEIL((SELECT total FROM total_count) / CAST(? AS FLOAT)) AS total_pages
FROM category_blog
WHERE category_blog.isDeleted = ? AND category_blog.cat_bl_name LIKE ?
LIMIT ? OFFSET ?
`

type GetListCategoryBlogParams struct {
	Isdeleted   sql.NullInt32
	CatBlName   string
	Column3     float64
	Isdeleted_2 sql.NullInt32
	CatBlName_2 string
	Limit       int32
	Offset      int32
}

type GetListCategoryBlogRow struct {
	CatBlID          string
	CatBlName        string
	CatBlDescription sql.NullString
	CatBlSlug        string
	CatBlOrder       sql.NullInt32
	CatBlStatus      sql.NullInt32
	TotalItems       int64
	TotalPages       int32
}

func (q *Queries) GetListCategoryBlog(ctx context.Context, arg GetListCategoryBlogParams) ([]GetListCategoryBlogRow, error) {
	rows, err := q.db.QueryContext(ctx, getListCategoryBlog,
		arg.Isdeleted,
		arg.CatBlName,
		arg.Column3,
		arg.Isdeleted_2,
		arg.CatBlName_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListCategoryBlogRow
	for rows.Next() {
		var i GetListCategoryBlogRow
		if err := rows.Scan(
			&i.CatBlID,
			&i.CatBlName,
			&i.CatBlDescription,
			&i.CatBlSlug,
			&i.CatBlOrder,
			&i.CatBlStatus,
			&i.TotalItems,
			&i.TotalPages,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreCategoryBlog = `-- name: RestoreCategoryBlog :exec
UPDATE category_blog
SET isDeleted = 0,
    deletedAt = NULL,
    deletedBy = NULL
WHERE cat_bl_id = ?
`

func (q *Queries) RestoreCategoryBlog(ctx context.Context, catBlID string) error {
	_, err := q.db.ExecContext(ctx, restoreCategoryBlog, catBlID)
	return err
}

const updateCategoryBlog = `-- name: UpdateCategoryBlog :exec
UPDATE category_blog
SET cat_bl_name = ?,
    cat_bl_description = ?,
    cat_bl_slug = ?,
    cat_bl_order = ?,
    updatedAt = NOW(),
    updatedBy = ?
WHERE cat_bl_id = ?
`

type UpdateCategoryBlogParams struct {
	CatBlName        string
	CatBlDescription sql.NullString
	CatBlSlug        string
	CatBlOrder       sql.NullInt32
	Updatedby        sql.NullString
	CatBlID          string
}

func (q *Queries) UpdateCategoryBlog(ctx context.Context, arg UpdateCategoryBlogParams) error {
	_, err := q.db.ExecContext(ctx, updateCategoryBlog,
		arg.CatBlName,
		arg.CatBlDescription,
		arg.CatBlSlug,
		arg.CatBlOrder,
		arg.Updatedby,
		arg.CatBlID,
	)
	return err
}

const updateStatusCategoryBlog = `-- name: UpdateStatusCategoryBlog :exec
UPDATE category_blog
SET cat_bl_status = ?,
    updatedAt = NOW(),
    updatedBy = ?
WHERE cat_bl_id = ?
`

type UpdateStatusCategoryBlogParams struct {
	CatBlStatus sql.NullInt32
	Updatedby   sql.NullString
	CatBlID     string
}

func (q *Queries) UpdateStatusCategoryBlog(ctx context.Context, arg UpdateStatusCategoryBlogParams) error {
	_, err := q.db.ExecContext(ctx, updateStatusCategoryBlog, arg.CatBlStatus, arg.Updatedby, arg.CatBlID)
	return err
}
