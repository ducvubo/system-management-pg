// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 0001_user_management_profile.sql

package database

import (
	"context"
	"database/sql"
)

const createUserProfile = `-- name: CreateUserProfile :execresult
INSERT INTO user_management_profile (
    us_id, us_name, us_avatar, us_phone, us_gender, us_address, us_birthday, createdBy, createdAt, updatedAt
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW()
)
`

type CreateUserProfileParams struct {
	UsID       string
	UsName     sql.NullString
	UsAvatar   sql.NullString
	UsPhone    sql.NullString
	UsGender   sql.NullString
	UsAddress  sql.NullString
	UsBirthday sql.NullTime
	Createdby  sql.NullString
}

func (q *Queries) CreateUserProfile(ctx context.Context, arg CreateUserProfileParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUserProfile,
		arg.UsID,
		arg.UsName,
		arg.UsAvatar,
		arg.UsPhone,
		arg.UsGender,
		arg.UsAddress,
		arg.UsBirthday,
		arg.Createdby,
	)
}

const deleteUserProfile = `-- name: DeleteUserProfile :exec
UPDATE user_management_profile
SET isDeleted = 1, deletedAt = NOW(), deletedBy = ?
WHERE us_id = ?
`

type DeleteUserProfileParams struct {
	Deletedby sql.NullString
	UsID      string
}

func (q *Queries) DeleteUserProfile(ctx context.Context, arg DeleteUserProfileParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserProfile, arg.Deletedby, arg.UsID)
	return err
}

const getListUserProfile = `-- name: GetListUserProfile :many
WITH total_count AS (
    SELECT COUNT(*) AS total FROM user_management_profile WHERE user_management_profile.isDeleted = ? AND user_management_profile.us_name LIKE ?
)
SELECT 
    us_id, us_name, us_avatar, us_phone, us_gender, us_address, us_birthday,
    (SELECT total FROM total_count) AS total_items,
    CEIL((SELECT total FROM total_count) / CAST(? AS FLOAT)) AS total_pages
FROM user_management_profile
WHERE user_management_profile.isDeleted = ? AND user_management_profile.us_name LIKE ?
LIMIT ? OFFSET ?
`

type GetListUserProfileParams struct {
	Isdeleted   sql.NullInt32
	UsName      sql.NullString
	Column3     float64
	Isdeleted_2 sql.NullInt32
	UsName_2    sql.NullString
	Limit       int32
	Offset      int32
}

type GetListUserProfileRow struct {
	UsID       string
	UsName     sql.NullString
	UsAvatar   sql.NullString
	UsPhone    sql.NullString
	UsGender   sql.NullString
	UsAddress  sql.NullString
	UsBirthday sql.NullTime
	TotalItems int64
	TotalPages int32
}

func (q *Queries) GetListUserProfile(ctx context.Context, arg GetListUserProfileParams) ([]GetListUserProfileRow, error) {
	rows, err := q.db.QueryContext(ctx, getListUserProfile,
		arg.Isdeleted,
		arg.UsName,
		arg.Column3,
		arg.Isdeleted_2,
		arg.UsName_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListUserProfileRow
	for rows.Next() {
		var i GetListUserProfileRow
		if err := rows.Scan(
			&i.UsID,
			&i.UsName,
			&i.UsAvatar,
			&i.UsPhone,
			&i.UsGender,
			&i.UsAddress,
			&i.UsBirthday,
			&i.TotalItems,
			&i.TotalPages,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserProfile = `-- name: GetUserProfile :one
SELECT us_id, us_name, us_avatar, us_phone, us_gender, us_address, us_birthday, isDeleted
FROM user_management_profile
WHERE us_id = ?
`

type GetUserProfileRow struct {
	UsID       string
	UsName     sql.NullString
	UsAvatar   sql.NullString
	UsPhone    sql.NullString
	UsGender   sql.NullString
	UsAddress  sql.NullString
	UsBirthday sql.NullTime
	Isdeleted  sql.NullInt32
}

func (q *Queries) GetUserProfile(ctx context.Context, usID string) (GetUserProfileRow, error) {
	row := q.db.QueryRowContext(ctx, getUserProfile, usID)
	var i GetUserProfileRow
	err := row.Scan(
		&i.UsID,
		&i.UsName,
		&i.UsAvatar,
		&i.UsPhone,
		&i.UsGender,
		&i.UsAddress,
		&i.UsBirthday,
		&i.Isdeleted,
	)
	return i, err
}

const restoreUserProfile = `-- name: RestoreUserProfile :exec
UPDATE user_management_profile
SET isDeleted = 0, deletedAt = NULL, deletedBy = NULL
WHERE us_id = ?
`

func (q *Queries) RestoreUserProfile(ctx context.Context, usID string) error {
	_, err := q.db.ExecContext(ctx, restoreUserProfile, usID)
	return err
}

const updateUserProfile = `-- name: UpdateUserProfile :exec
UPDATE user_management_profile
SET us_name = ?, us_avatar = ?, us_phone = ?, us_gender = ?, us_address = ?, us_birthday = ?, updatedAt = NOW(), updatedBy = ?
WHERE us_id = ?
`

type UpdateUserProfileParams struct {
	UsName     sql.NullString
	UsAvatar   sql.NullString
	UsPhone    sql.NullString
	UsGender   sql.NullString
	UsAddress  sql.NullString
	UsBirthday sql.NullTime
	Updatedby  sql.NullString
	UsID       string
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) error {
	_, err := q.db.ExecContext(ctx, updateUserProfile,
		arg.UsName,
		arg.UsAvatar,
		arg.UsPhone,
		arg.UsGender,
		arg.UsAddress,
		arg.UsBirthday,
		arg.Updatedby,
		arg.UsID,
	)
	return err
}
