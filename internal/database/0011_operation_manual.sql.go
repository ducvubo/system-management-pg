// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 0011_operation_manual.sql

package database

import (
	"context"
	"database/sql"
)

const createOperationManual = `-- name: CreateOperationManual :execresult
INSERT INTO operation_manual (
    opera_manual_id,opera_manua_res_id, opera_manual_title, opera_manual_content, opera_manual_type, opera_manual_status, note,
    createdBy, createdAt, updatedAt
) VALUES (
    ?, ?,?, ?, ?, ?, ?, ?, NOW(), NOW()
)
`

type CreateOperationManualParams struct {
	OperaManualID      string
	OperaManuaResID    string
	OperaManualTitle   string
	OperaManualContent string
	OperaManualType    string
	OperaManualStatus  NullOperationManualOperaManualStatus
	Note               sql.NullString
	Createdby          sql.NullString
}

func (q *Queries) CreateOperationManual(ctx context.Context, arg CreateOperationManualParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createOperationManual,
		arg.OperaManualID,
		arg.OperaManuaResID,
		arg.OperaManualTitle,
		arg.OperaManualContent,
		arg.OperaManualType,
		arg.OperaManualStatus,
		arg.Note,
		arg.Createdby,
	)
}

const deleteOperationManual = `-- name: DeleteOperationManual :exec
UPDATE operation_manual
SET isDeleted = 1, deletedAt = NOW(), deletedBy = ?
WHERE opera_manual_id = ? AND opera_manua_res_id = ?
`

type DeleteOperationManualParams struct {
	Deletedby       sql.NullString
	OperaManualID   string
	OperaManuaResID string
}

func (q *Queries) DeleteOperationManual(ctx context.Context, arg DeleteOperationManualParams) error {
	_, err := q.db.ExecContext(ctx, deleteOperationManual, arg.Deletedby, arg.OperaManualID, arg.OperaManuaResID)
	return err
}

const getListOperationManual = `-- name: GetListOperationManual :many
WITH total_count AS (
    SELECT COUNT(*) AS total FROM operation_manual
    WHERE operation_manual.isDeleted = ? AND operation_manual.opera_manual_title LIKE ? AND operation_manual.opera_manua_res_id = ?
)
SELECT 
    opera_manual_id, opera_manual_title, opera_manual_type, opera_manual_status, note,
    (SELECT total FROM total_count) AS total_items,
    COALESCE(CEIL((SELECT total FROM total_count) / NULLIF(CAST(? AS FLOAT), 0)), 0) AS total_pages
FROM operation_manual
WHERE operation_manual.isDeleted = ? AND operation_manual.opera_manual_title LIKE ? AND operation_manual.opera_manua_res_id = ?
LIMIT ? OFFSET ?
`

type GetListOperationManualParams struct {
	Isdeleted          sql.NullInt32
	OperaManualTitle   string
	OperaManuaResID    string
	Column4            float64
	Isdeleted_2        sql.NullInt32
	OperaManualTitle_2 string
	OperaManuaResID_2  string
	Limit              int32
	Offset             int32
}

type GetListOperationManualRow struct {
	OperaManualID     string
	OperaManualTitle  string
	OperaManualType   string
	OperaManualStatus NullOperationManualOperaManualStatus
	Note              sql.NullString
	TotalItems        int64
	TotalPages        interface{}
}

func (q *Queries) GetListOperationManual(ctx context.Context, arg GetListOperationManualParams) ([]GetListOperationManualRow, error) {
	rows, err := q.db.QueryContext(ctx, getListOperationManual,
		arg.Isdeleted,
		arg.OperaManualTitle,
		arg.OperaManuaResID,
		arg.Column4,
		arg.Isdeleted_2,
		arg.OperaManualTitle_2,
		arg.OperaManuaResID_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListOperationManualRow
	for rows.Next() {
		var i GetListOperationManualRow
		if err := rows.Scan(
			&i.OperaManualID,
			&i.OperaManualTitle,
			&i.OperaManualType,
			&i.OperaManualStatus,
			&i.Note,
			&i.TotalItems,
			&i.TotalPages,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOperationManual = `-- name: GetOperationManual :one
SELECT opera_manual_id, opera_manual_title, opera_manual_content, opera_manual_type,
       opera_manual_status, note, isDeleted
FROM operation_manual
WHERE opera_manual_id = ? AND opera_manua_res_id = ?
`

type GetOperationManualParams struct {
	OperaManualID   string
	OperaManuaResID string
}

type GetOperationManualRow struct {
	OperaManualID      string
	OperaManualTitle   string
	OperaManualContent string
	OperaManualType    string
	OperaManualStatus  NullOperationManualOperaManualStatus
	Note               sql.NullString
	Isdeleted          sql.NullInt32
}

func (q *Queries) GetOperationManual(ctx context.Context, arg GetOperationManualParams) (GetOperationManualRow, error) {
	row := q.db.QueryRowContext(ctx, getOperationManual, arg.OperaManualID, arg.OperaManuaResID)
	var i GetOperationManualRow
	err := row.Scan(
		&i.OperaManualID,
		&i.OperaManualTitle,
		&i.OperaManualContent,
		&i.OperaManualType,
		&i.OperaManualStatus,
		&i.Note,
		&i.Isdeleted,
	)
	return i, err
}

const restoreOperationManual = `-- name: RestoreOperationManual :exec
UPDATE operation_manual
SET isDeleted = 0, deletedAt = NULL, deletedBy = NULL
WHERE opera_manual_id = ? AND opera_manua_res_id = ?
`

type RestoreOperationManualParams struct {
	OperaManualID   string
	OperaManuaResID string
}

func (q *Queries) RestoreOperationManual(ctx context.Context, arg RestoreOperationManualParams) error {
	_, err := q.db.ExecContext(ctx, restoreOperationManual, arg.OperaManualID, arg.OperaManuaResID)
	return err
}

const updateOperationManual = `-- name: UpdateOperationManual :exec
UPDATE operation_manual
SET opera_manual_title = ?, opera_manual_content = ?, opera_manual_type = ?, note = ?,
    updatedAt = NOW(), updatedBy = ?
WHERE opera_manual_id = ? AND opera_manua_res_id = ?
`

type UpdateOperationManualParams struct {
	OperaManualTitle   string
	OperaManualContent string
	OperaManualType    string
	Note               sql.NullString
	Updatedby          sql.NullString
	OperaManualID      string
	OperaManuaResID    string
}

func (q *Queries) UpdateOperationManual(ctx context.Context, arg UpdateOperationManualParams) error {
	_, err := q.db.ExecContext(ctx, updateOperationManual,
		arg.OperaManualTitle,
		arg.OperaManualContent,
		arg.OperaManualType,
		arg.Note,
		arg.Updatedby,
		arg.OperaManualID,
		arg.OperaManuaResID,
	)
	return err
}

const updateOperationManualStatus = `-- name: UpdateOperationManualStatus :exec
UPDATE operation_manual
SET opera_manual_status = ?, updatedAt = NOW(), updatedBy = ?
WHERE opera_manual_id = ? AND opera_manua_res_id = ?
`

type UpdateOperationManualStatusParams struct {
	OperaManualStatus NullOperationManualOperaManualStatus
	Updatedby         sql.NullString
	OperaManualID     string
	OperaManuaResID   string
}

func (q *Queries) UpdateOperationManualStatus(ctx context.Context, arg UpdateOperationManualStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOperationManualStatus,
		arg.OperaManualStatus,
		arg.Updatedby,
		arg.OperaManualID,
		arg.OperaManuaResID,
	)
	return err
}
